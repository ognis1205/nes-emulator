/*
 * nes-emulator:
 * Emulator for the Nintendo Entertainment System (R) Archetecture.
 * Written by and Copyright (C) 2020 Shingo OKAWA shingo.okawa.g.h.c@gmail.com
 * Trademarks are owned by their respect owners.
 */
#ifndef _NES_CORE_CPU_H_
#define _NES_CORE_CPU_H_
#include <string>
#include <vector>

#include "types.h"

namespace nes {
namespace core {
class Bus;
  
/*
 * RICOH version MOS Technology 6502.
 * SEE: http://www.6502.org/
 */
class MOS6502 {
 public:
  static const Byte kStackOffset = 0xFD;

  static const Address kStackBaseAddress = 0x0100;

  static const Address kResetVectorAddress = 0xFFFC;

  static const Address kNMIVectorAddress = 0xFFFA;
  
  MOS6502();

  ~MOS6502();

  void Reset();

  void IRQ();

  void NMI();

  void Tick();

  void ConnectTo(Bus* bus);

  Byte Read(const Address& address);

  void Write(const Address& address, const Byte& byte);

  Byte Fetch();

  union {
    Byte value;
  } a = {0x00};

  union {
    Byte value;
  } x = {0x00};

  union {
    Byte value;
  } y = {0x00};

  union {
    Byte value;
  } s = {0x00};

  union {
    Address value;
    Bitfield<0, 8, Address> offset;
    Bitfield<8, 8, Address> page;
  } pc = {0x0000};

  union {
    Byte value;
    Bitfield<0, 1, Byte> carry;
    Bitfield<1, 1, Byte> zero;
    Bitfield<2, 1, Byte> irq_disable;
    Bitfield<3, 1, Byte> decimal_mode;
    Bitfield<4, 1, Byte> brk_command;
    Bitfield<5, 1, Byte> unused;
    Bitfield<6, 1, Byte> overflow;
    Bitfield<7, 1, Byte> negative;
  } p = {0x00};

 private:
  struct Operation {
    std::string name;
    Byte opcode;
    void (MOS6502::*addressing_mode)(void);
    void (MOS6502::*instruction)(void);
    size_t cycles;
  };

  Bus* bus_;

  struct Context {
    union {
      Byte value;
      Bitfield<0, 2, Byte> instruction_mode;
      Bitfield<2, 2, Byte> addressing_mode;
      Bitfield<5, 3, Byte> operation;
    } opcode = {0x00};

    union {
      Byte value;
    } operand = {0x00};

    union {
      Address address;
      Bitfield<0, 8, Address> offset;
      Bitfield<8, 8, Address> page;
    } address = {0x0000};

    size_t clock_count_ = 0;
  } context_;

  class Stack {
   public:
  };

  // Addressing Modes.
  void IMP();
  void IMM();
  void ZP0();
  void ZPX();
  void ZPY();
  void REL();
  void ABS();
  void ABX();
  void ABY();
  void IND();
  void IZX();
  void IZY();

  // Opcodes.
  void ADC();
  void AND();
  void ASL();
  void BCC();
  void BCS();
  void BEQ();
  void BIT();
  void BMI();
  void BNE();
  void BPL();
  void BRK();
  void BVC();
  void BVS();
  void CLC();
  void CLD();
  void CLI();
  void CLV();
  void CMP();
  void CPX();
  void CPY();
  void DEC();
  void DEX();
  void DEY();
  void EOR();
  void INC();
  void INX();
  void INY();
  void JMP();
  void JSR();
  void LDA();
  void LDX();
  void LDY();
  void LSR();
  void NOP();
  void ORA();
  void PHA();
  void PHP();
  void PLA();
  void PLP();
  void ROL();
  void ROR();
  void RTI();
  void RTS();
  void SBC();
  void SEC();
  void SED();
  void SEI();
  void STA();
  void STX();
  void STY();
  void TAX();
  void TAY();
  void TSX();
  void TXA();
  void TXS();
  void TYA();
  void XXX();
};

}  // namespace core
}  // namespace nes
#endif  // ifndef _NES_CORE_CPU_H_
